function [] = slider_plot()
% Plot different plots according to slider location.
% Junk data for comparison of adjusted curves in this example

S.fh = figure('units','normalized',...
    'Position', [0.515 0.025 0.415 0.87],... %%%%
              'name','slider_plot');


% BRAZO DERECHO
S.a = 0;
S.b = 0;
S.d = 0;
S.e = 0;
S.f = 0;
S.g = 0;

update(S);

% Slider for slope parameter:
S.aSlider = uicontrol('style','slider',...
               'unit','normalized',...
               'position',[0.2 0.3 0.3 0.01],...
               'min',-180,'max',180,'value', S.a,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'a'}); 
% Add a text uicontrol to label the slider.
txta = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.31 0.3 0.02],...
     'String','DOF 1');
% 2nd Slider:
S.bSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.35 0.3 0.01],...
               'min',-180,'max',180,'value', S.b,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'b'});
% Add a text uicontrol to label the slider.
txtb = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.36 0.3 0.02],...
     'String','DOF 2');       

% 4th Slider:
S.dSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.4 0.3 0.01],...
               'min',-180,'max',180,'value', S.d,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'd'});
% Add a text uicontrol to label the slider.
txtd = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.41 0.3 0.02],...
     'String','DOF3');    
 % 5th Slider:
S.eSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.45 0.3 0.01],...
               'min',-180,'max',180,'value', S.e,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'e'});
% Add a text uicontrol to label the slider.
txtd = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.46 0.3 0.02],...
     'String','DOF 4');  
 
  % 6th Slider:
S.fSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.50 0.3 0.01],...
               'min',-180,'max',180,'value', S.f,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'f'});
% Add a text uicontrol to label the slider.
txtd = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.51 0.3 0.02],...
     'String','DOF 5');  
  % 7th Slider:
S.eSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.55 0.3 0.01],...
               'min',-180,'max',180,'value', S.g,...
               'sliderstep',[0.003 0.03],...
               'callback', {@SliderCB, 'g'});
% Add a text uicontrol to label the slider.
txtd = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.56 0.3 0.02],...
     'String','DOF 6');  
 
 
guidata(S.fh, S);  % Store S structure in the figure
end
% Callback for all sliders defined above
function SliderCB(aSlider, EventData, Param)
S = guidata(aSlider);  % Get S structure from the figure
S.(Param) = get(aSlider, 'Value');  % Any of the 'a', 'b', etc. defined
update(S);  % Update the plot values
guidata(aSlider, S);  % Store modified S in figure
end
% Plot update function, creates new y-vector for plot and replaces the plot
% S.p2 with new y-vector
function update(S)
h1=FKdraw( S.a,S.b,S.d,S.e,S.f,S.g)
end

%% Fk Draw Function (Plots the Links in 3D space)
% <include>FKdraw.m</include>
%% DHkine Function (Computes the Transformation Matrices)
% <include>DHkine.m</include>
%% DH matrix Function (Contains the General DH Matrix)
% <include>DHmatrix.m</include>
%% XYZkine (To compute the Q matrix to plot)
% <include>XYZkine.m</include>